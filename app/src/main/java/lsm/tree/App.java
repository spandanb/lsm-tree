/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lsm.tree;


public class App {

    // task(001)
    public static String DataDir = "/path/to/dataDir";

    public static void main(String[] args) {
        // 1. create store config
        StoreConfig config = new StoreConfig(DataDir);
        System.out.println(String.format("Initializing db lib with config: [%s]", config));

        // 2. create connection to datastore
        // the db will eventually be exposed from a library.
        // a library is passive; the requests would come from the application
        // invoking the library.
        // drawing inspiration from rocksdb, the methods invoked would be
        // open -> opens a connection to db
        // close -> close a connection and persist state
        // put(key, value), del(key, value), get(key), list

        // for now, we have one massive storage data structure;
        // users/app can achieve logical separation by encoding the key like: table_a.key_0
        // later we can add ability to create separate data structures, comparable to new tree or tables
        Connection conn = new Connection(config);

        // 3. create worker that will use connection
        StoreWorker worker = new StoreWorker(conn);
        worker.doWork();

    }
}
